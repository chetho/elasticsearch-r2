name: Build and Push Docker Image

on:
  push:
    branches: [ develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOCKER_REGISTRY: public.ecr.aws
  ECR_REGISTRY_ALIAS: zvw
  IMAGE_NAME: elastic/elasticsearch-s3

jobs:
  security-scan:
    name: Security Scan & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Hadolint Dockerfile linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'hadolint-results.sarif'

    - name: Show Hadolint results (if SARIF upload failed)
      if: always()
      run: |
        echo "üìã Hadolint Results:"
        cat hadolint-results.sarif | jq -r '.runs[0].results[]? | "‚ùå \(.ruleId): \(.message.text)"' || echo "‚úÖ No Hadolint issues found"

    - name: Check base image is official Elasticsearch
      run: |
        if ! grep -q "FROM docker.elastic.co/elasticsearch/elasticsearch:" Dockerfile; then
          echo "Warning: Not using official Elasticsearch image from docker.elastic.co"
          echo "Please use: FROM docker.elastic.co/elasticsearch/elasticsearch:VERSION"
          exit 1
        fi
        echo "‚úÖ Using official Elasticsearch image"

  build:
    name: Build & Security Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm64
    
    - name: Configure AWS credentials
      if: github.event_name != 'pull_request'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # ECR Public is only available in us-east-1

    - name: Log in to Amazon ECR Public
      if: github.event_name != 'pull_request'
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
    
    - name: Extract Elasticsearch version from Dockerfile
      id: es_version
      run: |
        ES_VERSION=$(grep "FROM docker.elastic.co/elasticsearch/elasticsearch:" Dockerfile | sed 's/.*elasticsearch://')
        echo "elasticsearch_version=$ES_VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ Detected Elasticsearch version: $ES_VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.ECR_REGISTRY_ALIAS }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=${{ steps.es_version.outputs.elasticsearch_version }},enable=true
          type=raw,value=${{ steps.es_version.outputs.elasticsearch_version }}-{{branch}},enable={{is_default_branch}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Elasticsearch with R2 plugin for ARM64/AMD64
          org.opencontainers.image.version=${{ steps.es_version.outputs.elasticsearch_version }}
          org.opencontainers.image.vendor=Community
          elasticsearch.version=${{ steps.es_version.outputs.elasticsearch_version }}
    
    - name: Build for scanning (ARM64 primary)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        load: true
        tags: ${{ env.IMAGE_NAME }}:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning of built image
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (Table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'table'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy vulnerability scanner (JSON report)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'json'
        output: 'trivy-report.json'

    - name: Security Summary
      if: always()
      run: |
        echo "üîç Security Scan Summary for ARM64 Elasticsearch:"
        echo "================================================"
        
        # Count vulnerabilities by severity
        CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
        HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
        MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json 2>/dev/null || echo "0")
        LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-report.json 2>/dev/null || echo "0")
        
        echo "üî¥ CRITICAL: $CRITICAL"
        echo "üü† HIGH: $HIGH"
        echo "üü° MEDIUM: $MEDIUM"
        echo "üü¢ LOW: $LOW"
        echo ""
        
        # Debug: Show all vulnerabilities to understand the discrepancy
        echo "üîç Debug: All vulnerabilities found (first 10):"
        jq -r '.Results[]?.Vulnerabilities[]? | "\(.Severity): \(.VulnerabilityID) - \(.Title // .Description) (Package: \(.PkgName))"' trivy-report.json 2>/dev/null | sort | head -10
        echo ""
        
        # Show HIGH vulnerabilities if any
        if [ "$HIGH" -gt 0 ]; then
          echo "‚ö†Ô∏è  HIGH Severity Vulnerabilities:"
          jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | "- \(.VulnerabilityID): \(.Title // .Description) (Package: \(.PkgName))"' trivy-report.json 2>/dev/null
          echo ""
        fi
        
        # Show top HIGH vulnerabilities
        if [ "$HIGH" -gt 0 ]; then
          echo "‚ö†Ô∏è  Top HIGH Severity Vulnerabilities:"
          jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | "- \(.VulnerabilityID): \(.Title // .Description) (Package: \(.PkgName))"' trivy-report.json 2>/dev/null | head -5
          echo ""
        fi
        
        # Security gate - strict for PRs, informational for pushes
        if [ "$CRITICAL" -gt 0 ]; then
          echo "‚ùå SECURITY ALERT: $CRITICAL CRITICAL vulnerabilities found!"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ÔøΩ BLOCKING PR: Critical vulnerabilities must be fixed before merge"
            exit 1
          else
            echo "ÔøΩüö® Strongly recommend fixing before production use."
          fi
        fi
        
        if [ "$HIGH" -gt 0 ]; then
          echo "‚ö†Ô∏è  SECURITY WARNING: $HIGH HIGH vulnerabilities found"
          echo "ÔøΩ Consider updating base image or fixing vulnerabilities when possible."
          echo "ÔøΩ Allowing PR to proceed - HIGH vulnerabilities are warnings only"
        fi
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          if [ "$CRITICAL" -eq 0 ]; then
            echo "‚úÖ PR SECURITY GATE PASSED: No CRITICAL vulnerabilities found"
            echo "üîí Safe to merge to main branch"
            if [ "$HIGH" -gt 0 ]; then
              echo "‚ÑπÔ∏è  Note: $HIGH HIGH vulnerabilities present but not blocking"
            fi
          fi
        else
          echo "‚úÖ Build will continue - Security scanning is informational for pushes"
        fi
        
        echo "üìä Download the trivy-security-report artifact for detailed analysis"

    - name: Upload Trivy report as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-report
        path: trivy-report.json

    - name: Docker Scout CVE scan
      uses: docker/scout-action@v1
      if: github.event_name != 'pull_request'
      with:
        command: cves
        image: ${{ env.IMAGE_NAME }}:scan
        sarif-file: scout-report.sarif
        summary: true

    - name: Upload Docker Scout scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      continue-on-error: true
      with:
        sarif_file: 'scout-report.sarif'

    - name: Build and push (ARM64 primary)
      uses: docker/build-push-action@v5
      if: github.event_name != 'pull_request'
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

    - name: Update ECR Public repository description
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        echo "üìù ECR Public repository description update"
        echo "Note: ECR Public doesn't support automated description updates like Docker Hub"
        echo "Repository: ${{ env.DOCKER_REGISTRY }}/${{ env.ECR_REGISTRY_ALIAS }}/${{ env.IMAGE_NAME }}"
        echo "Please manually update the description in the AWS Console if needed"

  cleanup:
    name: Cleanup ECR Public
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Delete develop branch images from ECR Public
      run: |
        echo "üßπ Cleaning up develop branch images from ECR Public..."
        
        # Get repository name
        REPO_NAME="${{ env.IMAGE_NAME }}"
        REGISTRY_ALIAS="${{ env.ECR_REGISTRY_ALIAS }}"
        
        echo "üìã Fetching develop tags for repository: $REGISTRY_ALIAS/$REPO_NAME"
        
        # List all images and filter for develop tags
        DEVELOP_TAGS=$(aws ecr-public describe-images \
          --registry-id alias/$REGISTRY_ALIAS \
          --repository-name $REPO_NAME \
          --query 'imageDetails[?contains(imageTags, `develop`)].imageTags[]' \
          --output text 2>/dev/null | grep -E '^develop' || echo "")
        
        if [ -z "$DEVELOP_TAGS" ]; then
          echo "‚úÖ No develop branch images found to delete"
          exit 0
        fi
        
        echo "üóëÔ∏è  Found develop branch images to delete:"
        echo "$DEVELOP_TAGS"
        echo ""
        
        # Delete each develop tag
        DELETED_COUNT=0
        FAILED_COUNT=0
        
        for tag in $DEVELOP_TAGS; do
          echo "üóëÔ∏è  Deleting tag: $tag"
          
          # Get image digest for the tag
          IMAGE_DIGEST=$(aws ecr-public describe-images \
            --registry-id alias/$REGISTRY_ALIAS \
            --repository-name $REPO_NAME \
            --image-ids imageTag=$tag \
            --query 'imageDetails[0].imageDigest' \
            --output text 2>/dev/null)
          
          if [ "$IMAGE_DIGEST" != "None" ] && [ -n "$IMAGE_DIGEST" ]; then
            # Delete by digest to avoid issues with multiple tags on same image
            if aws ecr-public batch-delete-image \
              --registry-id alias/$REGISTRY_ALIAS \
              --repository-name $REPO_NAME \
              --image-ids imageDigest=$IMAGE_DIGEST >/dev/null 2>&1; then
              echo "‚úÖ Successfully deleted: $tag"
              ((DELETED_COUNT++))
            else
              echo "‚ùå Failed to delete: $tag"
              ((FAILED_COUNT++))
            fi
          else
            echo "‚ùå Could not find digest for: $tag"
            ((FAILED_COUNT++))
          fi
        done
        
        echo ""
        echo "üßπ Cleanup Summary:"
        echo "==================="
        echo "‚úÖ Successfully deleted: $DELETED_COUNT images"
        echo "‚ùå Failed to delete: $FAILED_COUNT images"
        
        if [ $FAILED_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è  Some deletions failed - check ECR permissions"
          exit 1
        fi
        
        echo "üéâ All develop branch images successfully cleaned up!"

    - name: Cleanup summary
      if: always()
      run: |
        echo "üìä ECR Public Cleanup Complete"
        echo "=============================="
        echo "Repository: ${{ env.DOCKER_REGISTRY }}/${{ env.ECR_REGISTRY_ALIAS }}/${{ env.IMAGE_NAME }}"
        echo "Trigger: Push to main branch (typically after PR merge)"
        echo "Action: Removed all 'develop' prefixed tags to keep registry clean"
        echo ""
        echo "üí° Remaining images should only be:"
        echo "   - latest (main branch)"
        echo "   - version tags (v1.0.0, etc.)"
        echo "   - Elasticsearch version tags (9.1.1, etc.)"