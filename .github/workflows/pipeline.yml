name: Build and Push Docker Image 

on:
  push:
    branches: [ develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: elasticsearch-r2

jobs:
  security-scan:
    name: Security Scan & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Hadolint Dockerfile linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'hadolint-results.sarif'

    - name: Show Hadolint results (if SARIF upload failed)
      if: always()
      run: |
        echo "üìã Hadolint Results:"
        cat hadolint-results.sarif | jq -r '.runs[0].results[]? | "‚ùå \(.ruleId): \(.message.text)"' || echo "‚úÖ No Hadolint issues found"

    - name: Check base image is official Elasticsearch
      run: |
        if ! grep -q "FROM docker.elastic.co/elasticsearch/elasticsearch:" Dockerfile; then
          echo "Warning: Not using official Elasticsearch image from docker.elastic.co"
          echo "Please use: FROM docker.elastic.co/elasticsearch/elasticsearch:VERSION"
          exit 1
        fi
        echo "‚úÖ Using official Elasticsearch image"

  build:
    name: Build & Security Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm64,linux/amd64
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,enable={{is_default_branch}}
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Elasticsearch with R2 plugin for ARM64/AMD64
          org.opencontainers.image.version={{version}}
          org.opencontainers.image.vendor=Community
    
    - name: Build for scanning (ARM64 primary)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        load: true
        tags: ${{ env.IMAGE_NAME }}:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning of built image
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (Table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'table'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy vulnerability scanner (JSON report)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'json'
        output: 'trivy-report.json'

    - name: Security Summary
      if: always()
      run: |
        echo "üîç Security Scan Summary for ARM64 Elasticsearch:"
        echo "================================================"
        
        # Count vulnerabilities by severity
        CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
        HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
        MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-report.json 2>/dev/null || echo "0")
        LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-report.json 2>/dev/null || echo "0")
        
        echo "üî¥ CRITICAL: $CRITICAL"
        echo "üü† HIGH: $HIGH"
        echo "üü° MEDIUM: $MEDIUM"
        echo "üü¢ LOW: $LOW"
        echo ""
        
        # Show top HIGH vulnerabilities
        if [ "$HIGH" -gt 0 ]; then
          echo "‚ö†Ô∏è  Top HIGH Severity Vulnerabilities:"
          jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | "- \(.VulnerabilityID): \(.Title // .Description) (Package: \(.PkgName))"' trivy-report.json 2>/dev/null | head -5
          echo ""
        fi
        
        # Security gate - strict for PRs, informational for pushes
        if [ "$CRITICAL" -gt 0 ]; then
          echo "‚ùå SECURITY ALERT: $CRITICAL CRITICAL vulnerabilities found!"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ÔøΩ BLOCKING PR: Critical vulnerabilities must be fixed before merge"
            exit 1
          else
            echo "ÔøΩüö® Strongly recommend fixing before production use."
          fi
        fi
        
        if [ "$HIGH" -gt 0 ]; then
          echo "‚ö†Ô∏è  SECURITY WARNING: $HIGH HIGH vulnerabilities found"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üö´ BLOCKING PR: High vulnerabilities must be fixed before merge"
            echo "üí° Only MEDIUM and LOW severity vulnerabilities are allowed in main branch"
            exit 1
          else
            echo "üí° Consider updating base image or fixing vulnerabilities."
          fi
        fi
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "‚úÖ PR SECURITY GATE PASSED: Only MEDIUM and LOW vulnerabilities found"
          echo "üîí Safe to merge to main branch"
        else
          echo "‚úÖ Build will continue - Security scanning is informational for pushes"
        fi
        
        echo "üìä Download the trivy-security-report artifact for detailed analysis"

    - name: Upload Trivy report as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-report
        path: trivy-report.json

    - name: Docker Scout CVE scan
      uses: docker/scout-action@v1
      if: github.event_name != 'pull_request'
      with:
        command: cves
        image: ${{ env.IMAGE_NAME }}:scan
        sarif-file: scout-report.sarif
        summary: true

    - name: Upload Docker Scout scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      continue-on-error: true
      with:
        sarif_file: 'scout-report.sarif'

    - name: Build and push (ARM64 primary, multi-platform)
      uses: docker/build-push-action@v5
      if: github.event_name != 'pull_request'
      with:
        context: .
        platforms: linux/arm64,linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

    - name: Update Docker Hub description
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md